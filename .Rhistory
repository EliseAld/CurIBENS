# load the data
path = "/Users/elise/Desktop/Guo_lung_2018/"
obj_to_load = "GSE99254_NSCLC.TCell.S12346.count.txt"
matrix <- read.table(paste0(path,obj_to_load), header=T)
rm(path)
rm(obj_to_load)
# Remove first two columns and get the gene names
matrix <- matrix[,-1]
matrix <- matrix[!is.na(matrix[,1]),]
rownames(matrix) <- matrix[,1]
matrix <- matrix[,-1]
# Write the custom function to perform PCA on a gene x cell matrix
pca <- function(matrix, norm, center, transpose) {
# matrix is a gene x cell matrix
# norm, center and transpose are booleans
if (norm == T) {
matrix <- apply(matrix,2,function(x) x/var(x))
}
if (center == T) {
matrix <- apply(matrix,2,function(x) x-mean(x))
}
if (transpose == T) {
matrix <- t(matrix)
}
pca <- prcomp(t(matrix))
return(pca)
}
# test the custom PCA function on Guo data
PCA <- pca(matrix, norm=T, center=T, transpose=F)
# Write the custom function to run sPCA on a gene x cell matrix
sPCA <- function(matrix, norm, center, transpose) {
if (transpose == T) {
matrix <- t(matrix)
}
if (norm == T) {
matrix <- apply(matrix,2,function(x) x/var(x))
}
if (center == T) {
matrix <- apply(matrix,2,function(x) x-mean(x))
}
library(nsprcomp)
spca <- nsprcomp(t(matrix),center=F)
return(spca)
}
# Write the custom function to run sPCA on a gene x cell matrix
library(nsprcomp)
sPCA <- function(matrix, norm, center, transpose) {
# matrix is a gene x cell matrix
# norm, center and transpose are booleans
if (transpose == T) {
matrix <- t(matrix)
}
if (norm == T) {
matrix <- apply(matrix,2,function(x) x/var(x))
}
if (center == T) {
matrix <- apply(matrix,2,function(x) x-mean(x))
}
spca <- nsprcomp(t(matrix),center=F)
return(spca)
}
# test the custom PCA function on Guo data
library(nsprcomp)
install.packages("nsprcomp")
# test the custom PCA function on Guo data
library(nsprcomp)
spca <- sPCA(matrix, norm=T, center=T, transpose=F)
# test the custom ZinbWave function on Guo data
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# test the custom ZinbWave function on Guo data
if (!requireNamespace("BiocManager", quietly = TRUE))
# test the custom ZinbWave function on Guo data
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("BiocParallel", version = "3.8")
library(BiocParallel)
# test the custom ZinbWave function on Guo data
BiocManager::install("zinbwave", version = "3.8")
library(zinbwave)
install.packages("gsl")
library(zinbwave)
install.packages("gsl")
install.packages("gsl")
library(zinbwave)
zinbwave<-function(Y,L=2,parallel=FALSE){
#Y is unnormalized counts not log transformed
#L is the latent dimensions computed
if(parallel){
bp<-BiocParallel::bpparam()
} else {
bp<-BiocParallel::SerialParam()
}
suppressWarnings(fit<-zinbwave::zinbFit(as.matrix(Y), K=L, BPPARAM=bp))
factors<-as.data.frame(zinbwave::getW(fit))
colnames(factors)<-paste0("dim",1:L)
rownames(factors)<-colnames(Y)
factors
}
zinb <- zinbwave(matrix,L=2)
sum(apply(matrix,1,sum) == 0)
# Check the distribution of nGene
ngene <- apply(matrix,2,function(x) sum(x!=0))
hist(ngene,breaks=1000)
min(ngene)
matrix <- matrix[,ngene<6000]
# We remove the cells with ngene > 6000, otherwise it skews the PCA (variance is biased)
rm(ngene)
# Remove genes with non zero counts
ncell <- apply(matrix,1,function(x) sum(x!=0))
hist(ncell,breaks=1000)
# Remove genes expressed in less than 5 cells
matrix <- matrix[ncell>5,]
rm(ncell)
# Check the distribution of nCell
ncell <- apply(matrix,1,function(x) sum(x!=0))
hist(ncell,breaks=1000)
min(ncell)
rm(ncell)
# test the custom PCA function on Guo data
PCA <- pca(matrix, norm=T, center=T, transpose=F)
PCA
summary(PCA)
PCA$sdev
plot(PCA$sdev)
plot(PCA$sdev[1:2000])
plot(PCA$sdev[1:1000])
plot(PCA$sdev[1:200])
plot(PCA$sdev[1:50])
plot(PCA$sdev[1:10])
PCA$rotation
dim(PCA$rotation)
length(PCA$sdev)
length(PCA$center)
length(PCA$scale)
dim(PCA$x)
# cells new coordinates are in PCA$x
# variance is in PCA$sdev
# genes projection in PCA space are in PCA$rotation
plot(PCA$sdev)
plot(PCA$sdev[1:10])
plot(PCA$sdev[1:20])
PCA$x[,2]
plot(PCA$x[,1],PCA$x[,2])
plot(PCA$x[,1],PCA$x[,2])
plot(PCA$x[,2],PCA$x[,3])
plot(PCA$x[,3],PCA$x[,4])
PCA$x[2,]
plot(PCA$x[,1],PCA$x[,2])
plot(PCA$x[,2],PCA$x[,3])
plot(PCA$x[,3],PCA$x[,4])
plot(PCA$x[,4],PCA$x[,5])
plot(PCA$x[,5],PCA$x[,6])
plot(PCA$x[,6],PCA$x[,7])
plot(PCA$x[,7],PCA$x[,8])
install.packages("factoextra")
install.packages("factoextra")
plot(PCA$x[,7],PCA$x[,8])
install.packages("factoextra")
fviz_eig
plot(PCA$x[,1],PCA$x[,2])
plot(PCA$x[,2],PCA$x[,3])
plot(PCA$x[,3],PCA$x[,4])
plot(PCA$x[,4],PCA$x[,5])
plot(PCA$x[,5],PCA$x[,6])
plot(PCA$x[,6],PCA$x[,7])
plot(PCA$x[,7],PCA$x[,8])
plot(PCA$x[,8],PCA$x[,9])
plot(PCA$x[,9],PCA$x[,10])
plot(PCA$x[,10],PCA$x[,11])
hist(PCA$x[,10])
hist(PCA$x[,10],breaks=1000)
hist(PCA$x[,10],breaks=10000)
hist(PCA$x[,10],breaks=100000)
hist(PCA$x[,1],breaks=100000)
hist(PCA$x[,2],breaks=100000)
hist(PCA$x[,3],breaks=100000)
hist(PCA$x[,4],breaks=100000)
hist(PCA$x[,5],breaks=100000)
hist(PCA$x[,6],breaks=100000)
hist(PCA$x[,7],breaks=100000)
hist(PCA$x[,8],breaks=100000)
hist(PCA$x[,9],breaks=100000)
hist(PCA$x[,10],breaks=100000)
hist(PCA$x[,11],breaks=100000)
hist(PCA$x[,12],breaks=100000)
plot(PCA$x[,5],PCA$x[,6])
plot(PCA$x[,6],PCA$x[,7])
plot(PCA$x[,7],PCA$x[,8])
plot(PCA$x[,8],PCA$x[,9])
install.packages("factoextra")
library(factoextra)
fviz_eig(PCA)
# test the custom PCA function on Guo data
library(nsprcomp)
spca <- sPCA(matrix, norm=T, center=T, transpose=F)
rm(PCA)
spca <- sPCA(matrix, norm=T, center=T, transpose=F)
gc()
spca <- sPCA(matrix, norm=T, center=T, transpose=F)
zinb <- zinbwave(t(matrix),L=2)
